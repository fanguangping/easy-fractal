#lang racket

(provide (all-defined-out))

(require picturing-programs)
(require "common.scm")

(define (draw-julia canvas config)
  (define *width* '())
  (define *height* '())
  (define *iteration* '())
  (define *init-number* '())
  (define *scale-weight* '())
  (define *color-depth* '())
  (define (load-config config)
    (set! *width* (get-assoc-value config 'width))
    (set! *height* (get-assoc-value config 'height))
    (set! *iteration* (get-assoc-value config 'iteration))
    (set! *init-number* (get-assoc-value config 'init-number))
    (set! *scale-weight* (get-assoc-value config 'scale-weight))
    (set! *color-depth* (eval (get-assoc-value config 'color-depth))))
  (define canvas-dc (send canvas get-dc))
  (define (scaled-x x) (/ (* (car *scale-weight*) (- x (/ *width* 2))) (* 0.5 *width*)))
  (define (scaled-y y) (/ (* (cdr *scale-weight*) (- y (/ *height* 2))) (* 0.5 *height*)))
  (define (iterate z iteration)
    (if (and (< (magnitude z) 2) (<= iteration *iteration*))
        (iterate (+ (* z z) *init-number*) (+ iteration 1))
        iteration))
  (define (depth->color depth)
    (let ((c (*color-depth* depth)))
      (make-color (car c) (cadr c) (caddr c))))
  (define (julia-image)
    (map-image
     (lambda (x y c)
       (let* ([depth (iterate (make-rectangular (scaled-x x) (scaled-y y)) 0)]
              [clr (*color-depth* depth)])
         (make-color (car clr) (cadr clr) (caddr clr))))
     (rectangle *width* *height* 'solid 'grey)))
  (load-config config)
  (send canvas-dc draw-bitmap (send (julia-image) get-bitmap) 0 0))